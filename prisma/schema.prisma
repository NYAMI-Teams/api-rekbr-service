// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  password   String
  kyc_status String
  status     String
  is_admin   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  kyc                    UserKyc?
  bankAccounts           BankAccount[]
  transactions_seller    Transaction[]        @relation("SellerTransactions")
  transactions_buyer     Transaction[]        @relation("BuyerTransactions")
  disputes_initiated     Dispute[]            @relation("DisputeInitiator")
  disputes_handled       Dispute[]            @relation("DisputeAdmin")
  fundRequests           FundReleaseRequest[] @relation("FundRequestSeller")
  fundRequestsHandled    FundReleaseRequest[] @relation("FundRequestAdmin")
  cancelled_transactions Transaction[]        @relation("CancelledBy")
  notifications          Notification[]
}

model UserKyc {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [user_id], references: [id])
  user_id         String   @unique
  fullname        String
  birth_date      DateTime
  last_education  String
  province        String
  city            String
  business_fields String
}

model BankList {
  id            String         @id @default(uuid())
  bank_name     String
  logo_url      String
  bankAccounts  BankAccount[]
  dummyAccounts DummyAccount[]
}

model DummyAccount {
  id             String   @id @default(uuid())
  bank           BankList @relation(fields: [bank_id], references: [id])
  bank_id        String
  account_number String
  account_name   String
}

model BankAccount {
  id                      String        @id @default(uuid())
  user                    User          @relation(fields: [user_id], references: [id])
  user_id                 String
  bank                    BankList      @relation(fields: [bank_id], references: [id])
  bank_id                 String
  account_number          String
  account_holder_name     String
  created_at              DateTime      @default(now())
  updated_at              DateTime      @updatedAt
  withdrawal_transactions Transaction[] @relation("WithdrawalBankAccount")
}

model Transaction {
  id                         String              @id @default(uuid())
  transaction_code           String              @unique
  seller                     User                @relation("SellerTransactions", fields: [seller_id], references: [id])
  seller_id                  String
  buyer                      User                @relation("BuyerTransactions", fields: [buyer_id], references: [id])
  buyer_id                   String
  item_name                  String
  item_price                 Int
  platform_fee               Int
  insurance_fee              Int
  total_amount               Int
  status                     String
  virtual_account_number     String
  paid_at                    DateTime?
  payment_deadline           DateTime?
  shipment_deadline          DateTime?
  confirmed_at               DateTime?
  withdrawal_bank_account    BankAccount         @relation("WithdrawalBankAccount", fields: [withdrawal_bank_account_id], references: [id])
  withdrawal_bank_account_id String
  withdrawn_at               DateTime?
  withdrawn_amount           Int?
  cancelled_at               DateTime?
  cancelled_by               User?               @relation("CancelledBy", fields: [cancelled_by_id], references: [id])
  cancelled_by_id            String?
  cancel_reason              String?
  refunded_at                DateTime?
  refund_amount              Int?
  refund_reason              String?
  created_at                 DateTime            @default(now())
  updated_at                 DateTime            @updatedAt
  shipment                   Shipment?
  dispute                    Dispute?
  fundReleaseRequest         FundReleaseRequest?
}

model Shipment {
  id              String      @id @default(uuid())
  transaction     Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id  String      @unique
  courier         CourierList @relation(fields: [courier_id], references: [id])
  courier_id      String
  tracking_number String
  shipment_date   DateTime?
  received_date   DateTime?
  photo_url       String?
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model CourierList {
  id        String     @id @default(uuid())
  name      String
  shipments Shipment[]
}

model Dispute {
  id             String      @id @default(uuid())
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id String      @unique
  initiator      User        @relation("DisputeInitiator", fields: [initiator_id], references: [id])
  initiator_id   String
  evidence_url   Json
  reason         String
  status         String
  admin          User?       @relation("DisputeAdmin", fields: [admin_id], references: [id])
  admin_id       String?
  created_at     DateTime    @default(now())
  resolved_at    DateTime?
}

model FundReleaseRequest {
  id             String      @id @default(uuid())
  transaction    Transaction @relation(fields: [transaction_id], references: [id])
  transaction_id String      @unique
  seller         User        @relation("FundRequestSeller", fields: [seller_id], references: [id])
  seller_id      String
  evidence_url   Json
  status         String
  admin          User?       @relation("FundRequestAdmin", fields: [admin_id], references: [id])
  admin_id       String?
  created_at     DateTime    @default(now())
  resolved_at    DateTime?
}

model Notification {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [id])
  user_id    String
  title      String
  type       String
  message    String
  is_read    Boolean  @default(false)
  created_at DateTime @default(now())
}
